====== Bugs and support ======

===== How to report? =====
Issues can be filed in [[http://bugzilla.kernel.org|kernel's bugzilla]]. Make sure to add [[mailto:linuxwifi@intel.com|linuxwifi@intel.com]] to the bug.
Always attach the kernel log to your reports:
<code>dmesg > dmesg.log</code> and attach dmesg.log to the bug.
Please also add the firmware version:
<code> ethtool -i wlan0 | grep firmware</code>
Note: the interface name (here wlan0) can vary between distributions.

===== How to debug? =====
==== Prints ====

The simplest way to provide minimal output is to dump your kernel log: dmesg. Sometimes we will ask for logs from the supplicant too - they typically land in syslog. iwlwifi can print more data to the kernel log if asked to: this is controlled by the debug module parameter. This is a [[https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/tree/drivers/net/wireless/intel/iwlwifi/iwl-debug.h#n145|bitmap]]. To see more debug prints, [[https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/tree/drivers/net/wireless/iwlwifi/Kconfig#n91|CONFIG_IWLWIFI_DEBUG]] must be enabled. 
Please don't add debug level unless instructed to do so. Adding more prints typically adds useless information.

==== Tracing ====

Another (more powerful) way to debug iwlwifi is to use tracing: 

<code>sudo trace-cmd record -e iwlwifi</code>
We will typically ask for more switches: 

<code>sudo trace-cmd record -e iwlwifi -e mac80211 -e cfg80211 -e iwlwifi_msg</code>
This records all the data that goes from and to the firmware. The output is a file: trace.dat which you can compress prior to sending. To enable tracing, [[https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/tree/drivers/net/wireless/iwlwifi/Kconfig#n130|CONFIG_IWLWIFI_TRACING]] must be set.

==== Firmware Debugging ====

Note that we no longer provide support for the firmware of the devices using iwldvm.

=== How to provide information to debug the firmware? ===
Getting data from the firmware can often provide a lot of information, especially when the traffic is being stalled, latency is high, queues are stuck etc.. Here is how to do so. This is working starting kernel 3.19.

First you'll need to allow DEV_COREDUMP by setting CONFIG_ALLOW_DEV_COREDUMP to Y.
Then, you'll need to create a core dump. This can be done by:

<code>echo 1 > /sys/kernel/debug/iwlwifi/0000\:0X\:00.0/iwlmvm/fw_dbg_collect</code>
(Check what is the X for your system)

You can now get the data from the devcoredump device and dump to a file:

<code>cat /sys/devices/virtual/devcoredump/devcdY/data > iwl.dump
echo 1 > /sys/devices/virtual/devcoredump/devcdY/data</code>

(Y is incremented each time)

The easiest is to define a udev rule to dump the data automatically as soon as a dump is created:

<code>SUBSYSTEM=="devcoredump", ACTION=="add", RUN+="/sbin/iwlfwdump.sh"</code>
You'll typically have to paste this into a new file called /etc/udev/rules.d/85-iwl-dump.rules.
This location can vary between distributions.

/sbin/iwlfwdump.sh can simply be:
<code>
#!/bin/bash

timestamp=$(date +%F_%H-%M-%S)
filename=/var/log/iwl-fw-error_${timestamp}.dump
cat /sys/${DEVPATH}/data > ${filename}
echo 1 > /sys/${DEVPATH}/data
</code>

This way, each time a dump is created it will automatically land on your file system.  Remember to make the /sbin/iwlfwdump.sh file executable (i.e. ''chmod a+x /sbin/iwlfwdump.sh''), so that the udev rule can execute it, otherwise it won't work.

To debug the firmware you'll typically need a customized version of it. This customization depends on the bug you are facing.
Starting from 4.1, we can trigger firmware dumps when issues occur (e.g. when the association fails) this again requires a customized firmware. In that case, the developer working with you will let you know and you won't have to trigger the dump yourself using fw_dbg_collect debugfs hook.

=== Firmware crashes ===

When the firmware crashes, you'll see a message like this: 

<code>iwlwifi 0000:01:00.0: Microcode SW error detected.  Restarting 0x82000000.
[snip]
iwlwifi 0000:01:00.0: Loaded firmware version: XX.XX.XX.XX
iwlwifi 0000:01:00.0: 0x0000090A | ADVANCED_SYSASSERT</code>
In this case, please copy the full dmesg output since there may be data before and after this message that can be helpful.

In case of a firmware crash or queues being stuck, a dump will be automatically created. If you have the udev rule in place, you'll see the dump on your file system. No customization needed in that case, the dump from a regular firmware will already include valuable data, but the firmware team is likely to ask reproduction with a customized version.
==== Privacy aspects ====

By sending the debug logs, you are providing information to Intel such as your email address, peer’s MAC address, and other information.  This information will be used only for the purpose of troubleshooting the issue you are reporting.  Intel is committed to protecting your privacy.  To learn more about Intel’s privacy practices, please visit [[http://www.intel.com/privacy|Intel's privacy site]] or write Intel Corporation, ATTN Privacy, Mailstop RNB4-145, 2200 Mission College Blvd., Santa Clara, CA 95054 USA. 

Please don't attach the firmware dumps to public bug trackers (such as bugzilla), but send it privately through email. We recommend you encrypt the data using the iwlwifi developers's PGP keys: Emmanuel Grumbach (6E363201), Johannes Berg (7BF9099A) and Luciano Coelho (1A3CC5FA).  For instance:

<code>gpg --encrypt -r 6E363201 -r 7BF9099A -r 1A3CC5FA <file_to_encrypt></code>

This will generate a new, encrypted file that you should provide to us.  Any of, and only, these developers will be able to open the file.  Adding the three keys during encryption allows us to respond faster, since we're not restrained by a single developer's availability.