
Go back â€“> [[en/users/Drivers/ath10k|ath10k]] 

 


===== ath10k Coding Style =====


==== Status/error variables ====

Use a variable named "ret" to store return values or status codes. Also propagate the error code to upper levels. 

Example: 


<code>int ret;

ret = request_firmware(&fw_entry, filename, ar->dev);
if (ret) {
        ath10k_warn("Failed to request firmware '%s': %d\n",
                    filename, ret);
        return ret;
}

return 0;</code>
Name context variables either "ar" or "ar_<hifname>". Use ath10k_<hifname>_priv() to get access to hif specific context. 

Examples: 


<code>struct ath10k *ar = ptr;
struct ath10k_pci *ar_sdio = ath10k_pci_priv(ar);</code>
For consistency always use the main context (struct ath10k *ar) as function parameter, don't use hif specific context. 


==== Error path ====

Use goto labels err_<action> for handing error path, with <action> giving a clear idea what the label does. 

Example: 


<code>ret = ath10k_hif_power_on(ar);
if (ret)
        return ret;

ret = ath10k_target_start(ar);
if (ret)
        goto err_power_off;

ret = ath10k_init_upload(ar);
if (ret)
        goto err_target_stop;

return 0;

err_target_stop:
        ath10k_target_stop(ar);

err_power_off:
        ath10k_hif_power_off(ar);

return ret;</code>
Print error codes after a colon: 


<code>ath10k_warn("failed to associate peer STA %pM\n: %d",
            sta->addr, ret);</code>
Try to start the warning messages with the the verb "failed" if possible. Warning and error messages start with lower case. 

ath10k_warn() is used for errors where it might be possible to recover and ath10k_err() for errors when it's not possible to recover in any way. 

Dan Carpenters g+ post about error paths: [[https://plus.google.com/u/0/106378716002406849458/posts/dnanfhQ4mHQ|https://plus.google.com/u/0/106378716002406849458/posts/dnanfhQ4mHQ]] 


==== Locking ====

Always document what spinlock/mutex/rcu actually protects. Locks should always protect data, not code flow. 


==== Naming ====

Name of symbols and functions follow style <drivername>_<filename>_<symbolname>. 

Example: 


<code>int ath10k_init_hw(struct ath10k *ar)</code>
For each component use function names create/destroy for allocating and freeing something, init/cleanup for initialising variables and cleaning up them afterwards and start/stop to temporarily pause something. 

Example: 


<code>int ath10k_cfg80211_create(struct ath10k *ar)
int ath10k_cfg80211_start(struct ath10k *ar)
void ath10k_cfg80211_stop(struct ath10k *ar)
void ath10k_cfg80211_destory(struct ath10k *ar)</code>

==== Comments ====

Multiline comment style is: 


<code>/* Foo
 * Bar
 */</code>

==== Things NOT to do ====

Don't use void pointers. 

Don't use typedef. 


==== Linux style ====

Follow [[http://git.kernel.org/?p=linux/kernel/git/torvalds/linux.git;a=blob;f=Documentation/CodingStyle;hb=HEAD|Linux Coding Style]]. 


==== Checking code ====

For checking the code we have a dedicated script [[https://github.com/qca/qca-swiss-army-knife/blob/master/tools/scripts/ath10k/ath10k-check|ath10k-check]] which runs various tests, including sparse and checkpatch. Run the script with ''--help'' to see the installation and usage instructions. Strongly recommended to run this before submitting patches as it can catch common problems.